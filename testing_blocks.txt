  // TEST EXPORT GREYSCALE AS JPG ---------------------------------|

  // Allocate raw buffer for tightly packed RGB bytes
  uint8_t* buffer2 = new uint8_t[(size_t)w * h * 3];

  for (int y = 0; y < h; y++) {
    for (int x = 0; x < w; x++) {
      Pixel& p = greyscale[y][x];  // or gaussian[y][x]
      size_t idx = ((size_t)y * w + x) * 3;
      buffer2[idx + 0] = p.r;
      buffer2[idx + 1] = p.g;
      buffer2[idx + 2] = p.b;
    }
  }

  if (!stbi_write_jpg("greyscaleFRAME.jpg", w, h, 3, buffer2, 90)) {
    std::cerr << "Failed to write greyscaleFRAME.jpg\n";
  }

  // Free buffer after writing
  delete[] buffer2;

  uint8_t* buffer2mask = new uint8_t[(size_t)w * h * 3];

  for (int y = 0; y < h; y++) {
    for (int x = 0; x < w; x++) {
      Pixel& p = greyscaleMask[y][x];  // or gaussian[y][x]
      size_t idx = ((size_t)y * w + x) * 3;
      buffer2mask[idx + 0] = p.r;
      buffer2mask[idx + 1] = p.g;
      buffer2mask[idx + 2] = p.b;
    }
  }

  if (!stbi_write_jpg("greyscaleMASK.jpg", w, h, 3, buffer2mask, 90)) {
    std::cerr << "Failed to write greyscaleMASK.jpg\n";
  }

  // Free buffer after writing
  delete[] buffer2mask;

  // --------------------------------------------------------------|





  // TEST EXPORT GAUSSIAN AS JPG ---------------------------------|
  // Allocate raw buffer for tightly packed RGB bytes
  uint8_t* buffer3 = new uint8_t[(size_t)w * h * 3];

  for (int y = 0; y < h; y++) {
    for (int x = 0; x < w; x++) {
      Pixel& p = gaussian[y][x];  // or gaussian[y][x]
      size_t idx = ((size_t)y * w + x) * 3;
      buffer3[idx + 0] = p.r;
      buffer3[idx + 1] = p.g;
      buffer3[idx + 2] = p.b;
    }
  }

  if (!stbi_write_jpg("gaussianFRAME.jpg", w, h, 3, buffer3, 90)) {
    std::cerr << "Failed to write gaussianFRAME.jpg\n";
  }

  // Free buffer after writing
  delete[] buffer3;

  // Allocate raw buffer for tightly packed RGB bytes
  uint8_t* buffer3mask = new uint8_t[(size_t)w * h * 3];

  for (int y = 0; y < h; y++) {
    for (int x = 0; x < w; x++) {
      Pixel& p = gaussianMask[y][x];  // or gaussian[y][x]
      size_t idx = ((size_t)y * w + x) * 3;
      buffer3mask[idx + 0] = p.r;
      buffer3mask[idx + 1] = p.g;
      buffer3mask[idx + 2] = p.b;
    }
  }

  if (!stbi_write_jpg("gaussianMASK.jpg", w, h, 3, buffer3mask, 90)) {
    std::cerr << "Failed to write gaussianMASK.jpg\n";
  }

  // Free buffer after writing
  delete[] buffer3mask;
  // --------------------------------------------------------------|